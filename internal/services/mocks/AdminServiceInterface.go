// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	database "go-bot/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// AdminServiceInterface is an autogenerated mock type for the AdminServiceInterface type
type AdminServiceInterface struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, login, password
func (_m *AdminServiceInterface) Authenticate(ctx context.Context, login string, password string) (*database.Admin, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *database.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.Admin, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.Admin); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: ctx, adminID, oldPassword, newPassword
func (_m *AdminServiceInterface) ChangePassword(ctx context.Context, adminID uint, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, adminID, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) error); ok {
		r0 = rf(ctx, adminID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAdmin provides a mock function with given fields: ctx, login, password
func (_m *AdminServiceInterface) CreateAdmin(ctx context.Context, login string, password string) (*database.Admin, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdmin")
	}

	var r0 *database.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.Admin, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.Admin); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, adminID
func (_m *AdminServiceInterface) GetProfile(ctx context.Context, adminID uint) (*database.Admin, error) {
	ret := _m.Called(ctx, adminID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *database.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*database.Admin, error)); ok {
		return rf(ctx, adminID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *database.Admin); ok {
		r0 = rf(ctx, adminID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminServiceInterface creates a new instance of AdminServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminServiceInterface {
	mock := &AdminServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
