services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: goooo_postgres
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # The database port should not be exposed to the host machine for security reasons.
    # The 'app' service can access it through the internal 'goooo_network'.
    networks:
      - goooo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Go Telegram Bot Application
  app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: goooo_app
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - goooo_network

  # Go Migrate service for database migrations
  migrate:
    image: migrate/migrate:v4.17.1
    profiles:
      - tools
    volumes:
      - ./migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - goooo_network
    command: ["-path", "/migrations", "-database", "postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"]

  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: goooo_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configs are now built into the image.
      # The entrypoint script generates the final config from a template.
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - goooo_network
    healthcheck:
      # This healthcheck now correctly uses wget (installed in the custom Dockerfile)
      # and points to the actual health endpoint proxied by Nginx.
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  goooo_network:
    driver: bridge 
