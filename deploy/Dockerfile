# Этап 1: Сборка
# Используем официальный образ Go как основу для сборки.
# Указываем конкретную версию для воспроизводимости сборок.
FROM golang:1.24-alpine AS builder

# Устанавливаем необходимые зависимости для сборки, включая CGO.
# CA-сертификаты нужны для того, чтобы Go-модули могли скачиваться по HTTPS.
RUN apk add --no-cache gcc musl-dev ca-certificates

# Устанавливаем рабочую директорию внутри контейнера.
WORKDIR /app

# Копируем файлы go.mod и go.sum для загрузки зависимостей.
# Этот слой кэшируется, если зависимости не менялись.
COPY go.mod go.sum ./
RUN go mod download

# Копируем остальной исходный код приложения.
COPY . .

# Собираем приложение.
# -ldflags "-w -s" - убирает отладочную информацию, уменьшая размер бинарника.
# CGO_ENABLED=0 - отключает CGO для создания статически скомпонованного бинарника.
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /go-bot ./cmd/bot

# Этап 2: Финальный образ на основе Alpine
# Используем Alpine, так как он минималистичен, но содержит необходимые утилиты и сертификаты
FROM alpine:latest

# Устанавливаем корневые сертификаты, необходимые для HTTPS-запросов
# Устанавливаем корневые сертификаты и curl для отладки
RUN apk --no-cache add ca-certificates curl

WORKDIR /app

# Копируем скомпилированный бинарник из стадии сборки
COPY --from=builder /go-bot .

# Этот пользователь и группа создаются в образе Alpine по умолчанию
# Запуск от имени непривилегированного пользователя повышает безопасность
USER nobody

EXPOSE 8080

ENTRYPOINT ["/app/go-bot"]
