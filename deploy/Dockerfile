# --- Этап 1: Сборщик (Builder) ---
# Используем конкретную версию Go на базе Alpine для консистентности и малого размера.
FROM golang:1.24-alpine AS builder

# Устанавливаем рабочую директорию.
WORKDIR /src

# 1. КОПИРУЕМ ТОЛЬКО ФАЙЛЫ ЗАВИСИМОСТЕЙ
# Этот слой кэшируется и пересобирается только при изменении go.mod или go.sum.
COPY go.mod go.sum ./

# 2. СКАЧИВАЕМ ЗАВИСИМОСТИ
# Этот шаг занимает много времени, но теперь он будет кэшироваться.
RUN go mod download

# Копируем весь остальной исходный код
COPY . .

# Собираем статически скомпилированный бинарник без отладочной информации
# -w - убирает DWARF символы
# -s - убирает таблицу символов
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /bin/app ./cmd/bot

# --- Финальный этап ---
# Используем пустой образ scratch для максимальной безопасности и минимального размера
FROM scratch

# Копируем CA-сертификаты из builder'а. Они необходимы для выполнения
# HTTPS-запросов из нашего приложения (например, к API Telegram).
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Копируем только скомпилированное приложение
COPY --from=builder /bin/app /app

# Создаем непривилегированного пользователя с UID 10001.
# USER 10001 не создает пользователя, а указывает Docker запустить
# контейнер от имени пользователя с этим UID. Это работает в scratch.
USER 10001

# Команда для запуска нашего приложения
# Создаем непривилегированного пользователя.
# Хотя в 'scratch' нет оболочки для создания пользователя, мы можем указать UID/GID.
# Если вы используете 'alpine', то сначала нужно создать пользователя:
# RUN addgroup -S appgroup && adduser -S appuser -G appgroup
# USER appuser

# Указываем, какой порт слушает приложение (только для информации, не открывает порт).
EXPOSE 8080
ENTRYPOINT ["/app"]